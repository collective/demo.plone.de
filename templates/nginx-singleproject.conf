### Pipeline:
# zope 1 ... zope n
# -> nginx (load-balancer)
# -> varnish
# -> nginx (frontend, SSL)

### load-balancing nginx config

upstream starzel_zeoclients {
        ip_hash;
        server 127.0.0.1:9182;
        server 127.0.0.1:9183;
        server 127.0.0.1:9184;
}

# internal server used as a load-balanced backend to varnish
server {
        listen 9181;
        server_name nginx_loadbalancer;
        keepalive_timeout 120;
        access_log /var/log/nginx/starzel.de_loadbalancer_access.log;
        error_log /var/log/nginx/starzel.de_loadbalancer_error.log;

        # Set max upload size.
        client_max_body_size 2000M;

        location / {
                proxy_connect_timeout 180s;
                proxy_send_timeout 180s;
                proxy_read_timeout 180s;
                send_timeout 180s;
                proxy_pass http://starzel_zeoclients;
        }
}

### frontend nginx config

upstream starzel_varnish {
       server localhost:9180;
}

# XXX: temporarily configure the production site the old way, using the zope
# server from another buildout directly as backend, and serve the load
# balancing/varnish setup on a different frontend address, not even using SSL
# since that host doesn't have a certificate

# XXX: to go away: frontend server to access varnish from the net
server {
       listen 195.62.125.67:80;
       server_name starzel.neww.de;
       access_log /var/log/nginx/starzel.de_frontend_access.log;
       error_log /var/log/nginx/starzel.de_frontend_error.log;
       location / {
               proxy_pass http://starzel_varnish/VirtualHostBase/http/starzel.neww.de:80/starzel/VirtualHostRoot/;
       }
}

# XXX: to go away: zope server provided by a different buildout on the same machine
upstream zope_starzel {
       server localhost:8087;
}

# canonical frontend SSL server
# XXX: eventually, upstream should become starzel_varnish
server {
       listen 195.62.125.67:443 ssl;
       server_name starzel.de;
       access_log /var/log/nginx/starzel.de_access.log;
       error_log /var/log/nginx/starzel.de_error.log;
       ssl_certificate      /home/starzel/nginx/starzel_cert.pem;
       ssl_certificate_key  /home/starzel/nginx/starzel_key.pem;
       location / {
               proxy_pass http://zope_starzel/VirtualHostBase/https/www.starzel.de:443/starzel/VirtualHostRoot/;
       }
       location /leistungen/training {
               alias /home/starzel/buildouts/starzel/static/training;
               autoindex off;
               index index.html;
       }
       location /dojo {
               alias /home/starzel/buildouts/starzel/static/dojo;
               autoindex off;
               index index.html;
       }
}

# permanently redirect HTTPS traffic for the www subdomain to canonical host
server {
       listen 195.62.125.67:443 ssl;
       server_name www.starzel.de;
       access_log off;
       ssl_certificate      /home/starzel/nginx/starzel_cert.pem;
       ssl_certificate_key  /home/starzel/nginx/starzel_key.pem;
       rewrite ^(.*)$ https://starzel.de$1 permanent;
}

# permanently redirect any HTTP (without SSL) traffic to HTTPS (same host, so
# other services than the website get the redirection as well)
server {
       listen 195.62.125.67:80;
       server_name .starzel.de;
       access_log off;
       rewrite ^(.*)$ https://$server_name$1 permanent;
}

# once per bind address (ideally, within an nginx config per host, independent
# of any project), declare HTTP and HTTPS default servers that temporarily
# redirect traffic for unconfigured hosts to the Starzel HTTPS website
# server {
#        listen 195.62.125.67:443 ssl default_server;
#        access_log off;
#        ssl_certificate      /home/starzel/nginx/starzel_cert.pem;
#        ssl_certificate_key  /home/starzel/nginx/starzel_key.pem;
#        rewrite ^(.*)$ https://starzel.de$1 redirect;
# }
# server {
#        listen 195.62.125.67:80 default_server;
#        access_log off;
#        rewrite ^(.*)$ https://starzel.de$1 redirect;
# }
